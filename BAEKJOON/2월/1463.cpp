

/// 정수 X에 사용할 수 있는 연산은 다음과 같이 세 가지 이다.
/// 1. X가 3으로 나누어 떨어지면, 3으로 나눈다.
/// 2. X가 2로 나누어 떨어지면, 2로 나눈다.
/// 3. 1을 뺀다.
/// 정수 N이 주어졌을 때, 위와 같은 연산 세 개를 적절히 사용해서 1을 만들려고 한다.연산을 사용하는 횟수의 최솟값을 출력하시오.

/// pre  : 첫째 줄에 1보다 크거나 같고, 10^6보다 작거나 같은 정수 N이 주어진다.
///		1 000 000 : 백만 < int32

/// post : 첫째 줄에 연산을 하는 횟수의 최솟값을 출력한다.


/// <summary>
///  10의 경우 (2의 배수)
///  10 -> 9 -> 3 -> 1 로      3번 만에 만들 수 있다.
///  10 -> 5 -> 4 -> 2 -> 1로  4번 만에 만들 수 있다.
/// 
///  13의 경우 (2와 3으로 이루어진 수 + 1) 
///  13 -> 12 -> 4 -> 2 -> 1	: 4번
///  13 -> 12 -> 6 -> 3 -> 1	: 4번
///  13 -> 12 -> 6 -> 2 -> 1	: 4번
/// 
///  15의 경우 (3의 배수) 
///  15 -> 5 -> 4 -> 2 -> 1		    : 4번
///  15 -> 14 -> 7 -> 6 -> 2 -> 1   : 5번
///  
///  16의 경우 (2의 n승)
///  16 -> 8 -> 4 -> 2 -> 1			: 4번
///  16 -> 15 -> 5 -> 4 -> 2 -> 1   : 5번
/// 
/// </summary>
/// <returns></returns>

// 규칙을 찾을 수도 있지만, 예외사항을 모두 찾을 수는 없음(소수 라던가)
// 동적으로 하는 것이 좋을 것으로 추측 됨

#define _CRT_SECURE_NO_WARNINGS	// scanf 에러 무시

#include <stdio.h>
#include <iostream>
#include <queue>
#include <algorithm>

using namespace std;


int main() {
	cin.tie(NULL);
	ios::sync_with_stdio(false);
	
	queue<int> que;
	int n, i=0; cin >> n;
	que.push(n); /// 큐에 넣음

	while (n != 1) {
		int end = que.size();
		for (int j = 0; j < end; j++) {
			n = que.front(); que.pop(); /// 큐에서 뻄
			if (n == 2 || n == 3) {
				n = 1;
				break;
			}
			if (n % 2 == 0)
				que.push(n / 2);
			if (n % 3 == 0)
				que.push(n / 3);
			que.push(n - 1);
		}
		i++;
	}
	cout << i;// << " 번 연산이 필요합니다.\n";
}

